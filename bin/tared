#!/usr/bin/bash
# ðŸ”— https://github.com/Klapptnot/bash.sh

declare -A l_cmds=(
  ["zip"]="unzip -l {:secondary:}"
  ["gz"]="gzip -l {:secondary:}"
  ["tar"]="tar -tf {:secondary:}"
  ["tar.gz"]="tar -tzf {:secondary:}"
  ["tar.bz2"]="tar -tjf {:secondary:}"
  ["tar.xz"]="tar -tJf {:secondary:}"
  ["tar.lzma"]="tar --lzma -tf {:secondary:}"
  ["tar.zst"]="tar --zstd -tf {:secondary:}"
  ["7z"]="7z l {:secondary:}"
  ["rar"]="unrar l {:secondary:}"
  ["xz"]="xz -l {:secondary:}"
  ["zst"]="zstd -l {:secondary:}"
  ["lzma"]="xz --list {:secondary:}"
  ["bz2"]="bzip2 -l {:secondary:}"
  ["lzh"]="lha l {:secondary:}"
)

declare -A e_cmds=(
  ["zip"]="unzip {:secondary:} -d {:primary:}"
  ["gz"]="gzip -d {:secondary:} -c {:primary:}"
  ["tar"]="tar -xf {:secondary:} -C {:primary:}"
  ["tar.gz"]="tar -xzf {:secondary:} -C {:primary:}"
  ["tar.bz2"]="tar -xjf {:secondary:} -C {:primary:}"
  ["tar.xz"]="tar -xJf {:secondary:} -C {:primary:}"
  ["tar.lzma"]="tar --lzma -xf {:secondary:} -C {:primary:}"
  ["tar.zst"]="tar --zstd -xf {:secondary:} -C {:primary:}"
  ["7z"]="7z x {:secondary:} -o {:primary:}"
  ["rar"]="unrar x {:secondary:} {:primary:}"
  ["xz"]="xz -d {:secondary:} -c | tar -xf - -C {:primary:}"
  ["zst"]="zstd -d {:secondary:} -c | tar -xf - -C {:primary:}"
  ["lzma"]="xz -d {:secondary:} -c | tar -xf - -C {:primary:}"
  ["bz2"]="bzip2 -d {:secondary:} -c | tar -xf - -C {:primary:}"
  ["lzh"]="lha e {:secondary:} {:primary:}"
)

declare -A c_cmds=(
  ["zip"]="zip {:secondary:} {:primary:}"
  ["gz"]="gzip {:primary:} -c > {:secondary:}"
  ["tar"]="tar -cf {:secondary:} {:primary:}"
  ["tar.gz"]="tar -czf {:secondary:} {:primary:}"
  ["tar.bz2"]="tar -cjf {:secondary:} {:primary:}"
  ["tar.xz"]="tar -cJf {:secondary:} {:primary:}"
  ["tar.lzma"]="tar --lzma -cf {:secondary:} {:primary:}"
  ["tar.zst"]="tar --zstd -cf {:secondary:} {:primary:}"
  ["7z"]="7z a {:secondary:} {:primary:}"
  ["rar"]="rar a {:secondary:} {:primary:}"
  ["xz"]="tar -cJf {:secondary:} {:primary:}"
  ["zst"]="tar --zstd -cf {:secondary:} {:primary:}"
  ["lzma"]="tar --lzma -cf {:secondary:} {:primary:}"
  ["bz2"]="tar -cjf {:secondary:} {:primary:}"
  ["lzh"]="lha a {:secondary:} {:primary:}"
)

function die {
  # shellcheck disable=SC2059
  printf -v err "${@}" 1>&2
  printf '\x1b[38;5;9m%s\x1b[0m' "${err}" >&2
  exit 1
}

function main {
  local _auto_run=false
  local _just_print=false
  local old_first="${1}"
  case "${1}" in
    'e' | 'E' | 'extract' | 'c' | 'C' | 'compress' | 'l' | 'L' | 'list')
      _oper_mode="${1}"
      shift 1
      ;;
    'h' | 'help')
      local help=(
        '\x1b[38;5;12mtared\x1b[0m - Tired of tar args, just say what you want\n'
        '\x1b[38;5;12mUsage\x1b[0m:'
        '  \x1b[38;5;14mtared\x1b[0m <\x1b[38;5;219moperation\x1b[0m> [\x1b[38;5;15mvalues\x1b[0m]\n'
        '  e, E, extract  <name> <folder>  - Extract <name> to folder or PWD'
        '  c, C, compress <name> [...]     - Compress files to <name>'
        '  l, L, list     <name>           - List contents of <name>'
        '  h, help                         - Show this message and exit'
        '  v, version                      - Show version and exit\n'
        '\x1b[38;5;12mNotes\x1b[0m:'
        '  The compression type will be determined by the file extension, just give'
        '  the correct arguments and it will work.'
        '  Long operation names (ex. list) will \x1b[38;5;191mexecute the command directly\x1b[0m'
        '  short lowercase ones (ex. l) will \x1b[38;5;191mask to run the command\x1b[0m'
        '  short uppercase ones (ex. L) will just \x1b[38;5;191mprint the command\x1b[0m\n'
        '\x1b[38;5;12mSupported files\x1b[0m:'
        '  tar, tar.{gz,xz,bz2,zst,lzma}, rar, 7z'
        '  zip, gz, xz, lzh, lzma, bz2, zst'
      )
      printf '%b\n' "${help[@]}"
      exit
      ;;
    'v' | 'version')
      printf '\x1b[38;5;87mtared\x1b[0m - Tired of tar args, just say what you want\n\ntared v0.1 (unix-bash)\n'
      exit
      ;;
    *)
      die 'Unknown operation "%s", try `tared ''help`\n' "${1:-<empty>}"
      ;;
  esac

  if [ "${#_oper_mode}" -gt 1 ]; then
    _oper_mode="${_oper_mode:0:1}"
    _auto_run=true
  fi
  if [[ "${_oper_mode}" =~ ^(E|C|L)$ ]]; then
    _oper_mode="${_oper_mode,,}"
    _just_print=true
  fi

  local primary=()
  local secondary=""

  local tout_dir=""
  case "${_oper_mode}" in
    'c')
      primary=("${@:2}")
      secondary="${1}"
      [[ -z "${secondary}" || -z "${primary[*]}" ]] \
        && die 'Usage: `tared'' %s [files]... <name>`\n' "${old_first}"
      ;;
    'e')
      # extract
      primary=("${@:2}")
      secondary="${1}"
      [[ -z "${secondary}" || -z "${primary[*]}" ]] \
        && die 'Usage: `tared'' %s <file> <folder>`\n' "${old_first}"
      ((${#primary[@]} > 1)) && die 'More than one destination\n'
      tout_dir="$(realpath "${primary[0]}")"
      [[ -e "${tout_dir}" && ! -d "${tout_dir}" ]] \
        && die 'Output is a regular file and not a folder: %s\n' "${tout_dir}"
      primary[0]="${tout_dir}"
      ;;
    'l')
      # list
      secondary="${1}"
      [ -z "${secondary}" ] \
        && die 'Usage: `tared'' %s <file>`\n' "${old_first}"
      ;;
  esac

  local ext=(
    'tar.gz'
    'tar.xz'
    'tar.bz2'
    'tar.zst'
    'tar.lzma'
    'tar'
    'rar'
    'zip'
    '7z'
    'gz'
    'xz'
    'lzh'
    'lzma'
    'bz2'
    'zst'
  )

  local invrt_cmd=false
  local cmd=''
  for _ext in "${ext[@]}"; do
    if [[ "${secondary}" == *"${_ext}" ]]; then
      [ "${_oper_mode}" == 'e' ] && cmd="${e_cmds[${_ext}]}"
      [ "${_oper_mode}" == 'c' ] && cmd="${c_cmds[${_ext}]}"
      [ "${_oper_mode}" == 'l' ] && cmd="${l_cmds[${_ext}]}"
      case "${_ext}" in 'gz') invrt_cmd=true ;; esac
      break
    fi
  done

  [ -z "${cmd}" ] \
    && die 'Unsupported file "%s", try `tared'' help`\n' "${secondary}"

  if ${invrt_cmd}; then
    cmd="${cmd/\{:secondary:\}/"${primary[*]@Q}"}"
    cmd="${cmd/\{:primary:\}/${secondary@Q}}"
  else
    cmd="${cmd/\{:secondary:\}/${secondary@Q}}"
    cmd="${cmd/\{:primary:\}/"${primary[*]@Q}"}"
  fi

  if ${_just_print}; then
    printf "%s" "${cmd}"
    exit 0
  fi

  printf "\x1b[38;5;87mCommand\x1b[0m  $ %s\n" "${cmd}"
  if ! "${_auto_run}"; then
    printf '\x1b[38;5;99mExecute the command [y|*]:\x1b[0m '
    read -rn1 _do_run
    if [ "${_do_run}" != 'y' ]; then
      [ "${_do_run}" != '' ] && printf '\n'
      exit
    fi
    printf '\n'
  fi

  if [ "${_oper_mode}" == 'e' ] && [ -n "${tout_dir}" ] && [ ! -d "${tout_dir}" ]; then
    mkdir -p "${tout_dir}" || die 'Could not create folder: %s\n' "${tout_dir}"
  fi

  local _exit_code=0
  if ! eval "${cmd}"; then
    _exit_code="${?}"
    printf '\x1b[38;5;160mError in the execution of the command!\x1b[0m\n'
    exit "${_exit_code}"
  else
    printf '\x1b[38;5;87mCommand executed successfully!\x1b[0m\n'
    exit 0
  fi
}

main "${@}"
